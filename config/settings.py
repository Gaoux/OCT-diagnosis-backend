"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import environ
import os
from corsheaders.defaults import default_headers
env = environ.Env()
environ.Env.read_env()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# UPDATE DATABASE
# Initialize environment variables
env = environ.Env()

# Read from .env file (only for local development)
env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

SECRET_KEY = env("SECRET_KEY")  # Load secret key securely
DEBUG = env("DEBUG")  # Load debug mode (set to False in production)

FRONTEND_URL = env('FRONTEND_URL', cast=str, default='http://localhost:3000')
CORS_ALLOW_CREDENTIALS = True

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["localhost"])

CORS_ALLOWED_ORIGINS = env.list("CORS_ALLOWED_ORIGINS", default=["http://localhost:3000"])

# Application definition

INSTALLED_APPS = [
    "rest_framework",
    "apps.oct_analysis", 
    'apps.reports',
    "apps.users", 
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'corsheaders',

]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



# REST Framework Configuration (Enable JWT Authentication)
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

# ------------------------------
# HTTPS Settings (Comment these out until you have configured HTTPS and SSH key)

# Use HTTPS for secure cookies in production
# CSRF_COOKIE_SECURE = True  # Uncomment this line in production (only over HTTPS)
# SESSION_COOKIE_SECURE = True  # Uncomment this line in production (only over HTTPS)
# SECURE_BROWSER_XSS_FILTER = True  # Uncomment this line in production (for better security)
# SECURE_CONTENT_TYPE_NOSNIFF = True  # Uncomment this line in production (prevent sniffing)
# SECURE_SSL_REDIRECT = True  # Redirect all HTTP traffic to HTTPS - Uncomment once HTTPS is ready
# SECURE_HSTS_SECONDS = 31536000  # Force HTTPS for one year (uncomment after configuring HTTPS)
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply HSTS to all subdomains (uncomment in production)
# SECURE_HSTS_PRELOAD = True  # Allow your domain to be included in the HSTS preload list - Uncomment in production

# ------------------------------
# When ready with HTTPS (after SSH key and SSL certificate configuration), uncomment the lines above.



ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

import sys

if 'test' in sys.argv or 'pytest' in sys.argv:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:',  # Base de datos en memoria (más rápida)
            # Opcional: Usar archivo físico para debug (reemplaza :memory:)
            # 'NAME': BASE_DIR / 'test_db.sqlite3',
        }
    }
    # Desactiva migraciones para acelerar pruebas
    MIGRATION_MODULES = {
        'oct_analysis': None,
        'users': None,
        'reports': None,
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env('DB_NAME'),
            'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': env('DB_HOST',  default='localhost'),
            'PORT': env('DB_PORT',  default='5432'),
        }
    }

# URL path for accessing media files via browser (e.g., http://localhost:8000/media/...)
MEDIA_URL = '/media/'
# Filesystem path where uploaded media files will be stored (inside the project directory)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User (required for login/register)
AUTH_USER_MODEL = 'users.UserAccount'

# CORS CONFIG PARA FRONTEND
CORS_ALLOW_CREDENTIALS = True


CORS_ALLOW_HEADERS = list(default_headers) + [
    'X-CSRFToken',
    'authorization',
]
#Email connections 
# Mailtrap Sandbox
EMAIL_BACKEND = env('EMAIL_BACKEND')
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env.int('EMAIL_PORT')  # ¡Importante! Convierte a entero.
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)  # True
EMAIL_USE_SSL = env.bool('EMAIL_USE_SSL', default=False)  # False
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')

